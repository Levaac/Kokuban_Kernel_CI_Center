# .github/workflows/reusable-build-job.yml
name: Reusable - Universal Build Job
on:
  workflow_call:
    inputs:
      project_key:
        required: true
        type: string
      branch_name:
        required: true
        type: string
      do_release:
        required: true
        type: string # Actions converts booleans to strings here
      is_prerelease:
        required: true
        type: string # Actions converts booleans to strings here
    secrets:
      GH_TOKEN:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_DIR: "${{ github.workspace }}/.ccache"
      PROJECT_KEY: ${{ inputs.project_key }}
      BRANCH_NAME: ${{ inputs.branch_name }}
      DO_RELEASE: ${{ inputs.do_release }}
      IS_PRERELEASE_INPUT: ${{ inputs.is_prerelease }}
    steps:
      - {uses: actions/checkout@v4}
      - name: Install Dependencies
        run: |
          sudo apt-get update
          # --- FIX: Added lld package to ensure the linker is available ---
          sudo apt-get install -y build-essential git libncurses5-dev bc bison flex libssl-dev p7zip-full lz4 cpio curl libelf-dev dwarves ccache jq lld gcc-multilib
      
      - name: Parse Project Configuration
        id: config
        run: |
          CONFIG_JSON=$(cat ${{ github.workspace }}/configs/projects.json | jq -r --arg PKEY "$PROJECT_KEY" '.[$PKEY]')
          if [ -z "$CONFIG_JSON" ] || [ "$CONFIG_JSON" == "null" ]; then echo "错误: 未找到项目 '$PROJECT_KEY' 的配置。"; exit 1; fi

          echo "PROJECT_REPO=$(echo $CONFIG_JSON | jq -r .repo)" >> $GITHUB_ENV
          echo "PROJECT_DEFCONFIG=$(echo $CONFIG_JSON | jq -r .defconfig)" >> $GITHUB_ENV
          echo "PROJECT_LOCALVERSION_BASE=$(echo $CONFIG_JSON | jq -r .localversion_base)" >> $GITHUB_ENV
          echo "PROJECT_LTO=$(echo $CONFIG_JSON | jq -r .lto)" >> $GITHUB_ENV
          echo "PROJECT_TOOLCHAIN_URLS=$(echo $CONFIG_JSON | jq -c .toolchain_urls)" >> $GITHUB_ENV
          echo "PROJECT_TOOLCHAIN_PATH_PREFIX=$(echo $CONFIG_JSON | jq -r .toolchain_path_prefix)" >> $GITHUB_ENV
          echo "PROJECT_TOOLCHAIN_PATH_EXPORTS=$(echo $CONFIG_JSON | jq -c .toolchain_path_exports)" >> $GITHUB_ENV
          ANYKERNEL_REPO_URL=$(echo $CONFIG_JSON | jq -r .anykernel_repo)
          echo "PROJECT_ANYKERNEL_REPO=${ANYKERNEL_REPO_URL}" >> $GITHUB_ENV
          ANYKERNEL_REPO_SLUG=$(echo "$ANYKERNEL_REPO_URL" | sed 's|https://github.com/||' | sed 's|\.git$||')
          echo "PROJECT_ANYKERNEL_REPO_SLUG=${ANYKERNEL_REPO_SLUG}" >> $GITHUB_ENV
          echo "PROJECT_ANYKERNEL_BRANCH=$(echo $CONFIG_JSON | jq -r .anykernel_branch)" >> $GITHUB_ENV
          echo "PROJECT_ZIP_NAME_PREFIX=$(echo $CONFIG_JSON | jq -r .zip_name_prefix)" >> $GITHUB_ENV
          echo "PROJECT_VERSION_METHOD=$(echo $CONFIG_JSON | jq -r '.version_method // "param"')" >> $GITHUB_ENV
          echo "PROJECT_EXTRA_HOST_ENV=$(echo $CONFIG_JSON | jq -r '.extra_host_env // "false"')" >> $GITHUB_ENV
          echo "PROJECT_DISABLE_SECURITY=$(echo $CONFIG_JSON | jq -c '.disable_security // []')" >> $GITHUB_ENV

      - name: Checkout Kernel Repository
        uses: actions/checkout@v4
        with: {repository: "${{ env.PROJECT_REPO }}", ref: "${{ env.BRANCH_NAME }}", path: kernel_source, submodules: 'recursive'}
      
      - name: Cache Toolchain
        id: toolchain-cache
        uses: actions/cache@v4
        with: {path: kernel_source/toolchain, key: "${{ runner.os }}-toolchain-${{ env.PROJECT_KEY }}"}
      
      - name: Download and Extract Toolchain
        if: steps.toolchain-cache.outputs.cache-hit != 'true'
        working-directory: kernel_source
        run: |
          URLS=$(echo '${{ env.PROJECT_TOOLCHAIN_URLS }}' | jq -r '.[]')
          PART_FILES=""
          i=0
          for url in $URLS; do
            part_file="toolchain.part$i"
            wget -O "$part_file" "$url"
            PART_FILES="$PART_FILES $part_file"
            i=$((i+1))
          done
          cat $PART_FILES > toolchain.tar.gz
          mkdir -p ./toolchain && tar -xzvf toolchain.tar.gz -C ./toolchain/
          rm $PART_FILES toolchain.tar.gz
          echo "--- Setting executable permissions for toolchain binaries ---"
          find ./toolchain -type f -path "*/bin/*" -exec chmod +x {} \;
      
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ccache-${{ env.PROJECT_KEY }}-${{ env.BRANCH_NAME }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ env.PROJECT_KEY }}-

      - name: Get AnyKernel3 Remote Commit Hash
        id: get_ak3_hash
        run: |
          HASH=$(git ls-remote ${{ env.PROJECT_ANYKERNEL_REPO }} ${{ env.PROJECT_ANYKERNEL_BRANCH }} | cut -f1)
          if [ -z "$HASH" ]; then echo "Error: Could not get remote commit hash for AnyKernel3."; exit 1; fi
          echo "hash=$HASH" >> $GITHUB_OUTPUT
      
      - name: Cache AnyKernel3 Repository
        uses: actions/cache@v4
        id: anykernel-cache
        with:
          path: anykernel_repo
          key: anykernel-${{ env.PROJECT_KEY }}-${{ steps.get_ak3_hash.outputs.hash }}
          restore-keys: |
            anykernel-${{ env.PROJECT_KEY }}-
      
      - name: Checkout AnyKernel3 if cache not hit
        if: steps.anykernel-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PROJECT_ANYKERNEL_REPO_SLUG }}
          ref: ${{ env.PROJECT_ANYKERNEL_BRANCH }}
          path: anykernel_repo
          fetch-depth: 1
      
      - name: Setup KernelSU based on branch
        working-directory: ./kernel_source
        run: |
          if [[ "${{ env.BRANCH_NAME }}" == "sukisuultra" ]]; then
            if [[ "${{ env.PROJECT_KEY }}" == "z3_sm8350" ]]; then
              echo "--- Detected z3_sm8350 on sukisuultra branch, using SukiSU fork with version susfs-1.5.7 ---"
              curl -LSs "https://raw.githubusercontent.com/Prslc/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-1.5.7
            else
              echo "--- Using standard SukiSU-Ultra setup ---"
              curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
            fi
          elif [[ "${{ env.BRANCH_NAME }}" == "mksu" ]]; then
            curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash -
          elif [[ "${{ env.BRANCH_NAME }}" == "ksu" ]]; then
            curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
          fi

      - name: Setup ccache environment
        run: |
          echo "CCACHE_BASEDIR=${{ github.workspace }}/kernel_source" >> $GITHUB_ENV
          echo "CCACHE_SLOPPINESS=time_macros" >> $GITHUB_ENV

      - name: Run Universal Build Script
        env: {GH_TOKEN: "${{ secrets.GH_TOKEN }}"}
        run: |
          cp scripts/build.sh ./kernel_source/
          cd ./kernel_source
          chmod +x ./build.sh
          ./build.sh
      
      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ env.PROJECT_KEY }}-${{ env.BRANCH_NAME }}-${{ github.run_id }}
          path: |
            kernel_source/out/*.zip
            kernel_source/kernel_build_log.txt
          retention-days: 7
